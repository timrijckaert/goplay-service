import groovy.json.JsonSlurper
import groovy.transform.Field

@Lazy @Field def localProperties = loadProperties('local.properties')

@Field String jsonConfig =
        """
{
  "vrtnu": {
    "sample": "VRT_NU.xml",
    "test": "VRTApiE2ETest.xml"
  },
  "vtmgo": {
    "sample": "VTM_GO.xml",
    "test": "VTMApiE2ETest.xml"
  },
  "goplay": {
    "sample": "GO_PLAY.xml",
    "test": "GoPlayApiE2ETest.xml"
  }
}
"""

@Field def runConfig = new JsonSlurper().parseText(jsonConfig)

def readAuthenticationTokens(final Test testLambda) {
    for (def brand in runConfig.keySet()) {
        final String usernameKey = "${brand}.username"
        final String username = localProperties.getProperty(usernameKey)
        final String passwordKey = "${brand}.password"
        final String password = localProperties.getProperty(passwordKey)

        if (username?.trim() && password?.trim()) {
            testLambda.systemProperty usernameKey, username
            testLambda.systemProperty passwordKey, password

            def sampleRunConfigFileName = runConfig[brand].sample
            def sampleConfig = loadRunConfiguration(sampleRunConfigFileName)

            sampleConfig.configuration.option
                    .findAll { node -> node.'@name' == 'PROGRAM_PARAMETERS' }
                    .forEach { it."@value" = "${username} ${password}".toString() }

            writeRunConfiguration(sampleConfig, sampleRunConfigFileName)

            def testRunConfigFileName = runConfig[brand].test
            def testRunConfig = loadRunConfiguration(testRunConfigFileName)

            def envs = testRunConfig.configuration.envs.env
            envs.findAll { node -> node.'@name' == usernameKey }.first().'@value' = username
            envs.findAll { node -> node.'@name' == passwordKey }.first().'@value' = password

            writeRunConfiguration(testRunConfig, testRunConfigFileName)
        }
    }
}

private def loadProperties(final String fileLocation) {
    Properties properties = new Properties()
    def releaseFile = project.rootProject.file(fileLocation)
    if (releaseFile.exists()) {
        properties.load(releaseFile.newDataInputStream())
    }
    return properties
}

private Node loadRunConfiguration(final String fileName) {
    return new XmlParser().parse(project.rootProject.file(".idea/runConfigurations/$fileName"))
}

private static def writeRunConfiguration(final Node config, final String fileName) {
    def runConfig = new File(".idea/runConfigurations/$fileName")
    if (runConfig.exists()) {
        return new XmlNodePrinter(new PrintWriter(new FileWriter(".idea/runConfigurations/$fileName"))).print(config)
    }
}

ext {
    addAuthenticationTokensToSystemEnv = this.&readAuthenticationTokens
}
